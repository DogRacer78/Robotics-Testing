//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/RobotControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RobotControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RobotControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RobotControls"",
    ""maps"": [
        {
            ""name"": ""RobotMovement"",
            ""id"": ""9d302dd9-f168-4c41-a534-b6f921dd6ccf"",
            ""actions"": [
                {
                    ""name"": ""LowerYAxis"",
                    ""type"": ""PassThrough"",
                    ""id"": ""33bbdd7d-36c4-4ad4-9891-5172877dfe17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5cd89cbf-ab32-4aa5-b6a7-e8aaaa5cae38"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LowerYAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // RobotMovement
        m_RobotMovement = asset.FindActionMap("RobotMovement", throwIfNotFound: true);
        m_RobotMovement_LowerYAxis = m_RobotMovement.FindAction("LowerYAxis", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // RobotMovement
    private readonly InputActionMap m_RobotMovement;
    private IRobotMovementActions m_RobotMovementActionsCallbackInterface;
    private readonly InputAction m_RobotMovement_LowerYAxis;
    public struct RobotMovementActions
    {
        private @RobotControls m_Wrapper;
        public RobotMovementActions(@RobotControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LowerYAxis => m_Wrapper.m_RobotMovement_LowerYAxis;
        public InputActionMap Get() { return m_Wrapper.m_RobotMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RobotMovementActions set) { return set.Get(); }
        public void SetCallbacks(IRobotMovementActions instance)
        {
            if (m_Wrapper.m_RobotMovementActionsCallbackInterface != null)
            {
                @LowerYAxis.started -= m_Wrapper.m_RobotMovementActionsCallbackInterface.OnLowerYAxis;
                @LowerYAxis.performed -= m_Wrapper.m_RobotMovementActionsCallbackInterface.OnLowerYAxis;
                @LowerYAxis.canceled -= m_Wrapper.m_RobotMovementActionsCallbackInterface.OnLowerYAxis;
            }
            m_Wrapper.m_RobotMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LowerYAxis.started += instance.OnLowerYAxis;
                @LowerYAxis.performed += instance.OnLowerYAxis;
                @LowerYAxis.canceled += instance.OnLowerYAxis;
            }
        }
    }
    public RobotMovementActions @RobotMovement => new RobotMovementActions(this);
    public interface IRobotMovementActions
    {
        void OnLowerYAxis(InputAction.CallbackContext context);
    }
}
